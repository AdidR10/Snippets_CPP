<snippet>
  <content><![CDATA[
// video https://youtu.be/0jWeUdxrGm4
// problem https://www.spoj.com/problems/RMQSQ/
#include <bits/stdc++.h>
using namespace std;
////////////Range minimum query //////////////
/////can be used for finding range max, min, and gcd in constant time/////
///// O(nlogn + q * 1)///////


const int MAX_N = 200005;
const int LOG = 18;     //// subject to change. change this value manually by observing input n. LOG = floor(log2(n)) 
int a[MAX_N];
int m[MAX_N][LOG]; // m[i][j] is minimum among a[i..i+2^j-1]
int bin_log[MAX_N];

int query(int L, int R) { // O(1)
    int length = R - L + 1;
    int k = bin_log[length];
    return min(m[L][k], m[R-(1<<k)+1][k]);
}

int main() {
    ios_base::sync_with_stdio(0);cin.tie(0);
    // 1) read input
    int n, q;
    cin >> n >> q;  
    bin_log[1] = 0;
    for(int i = 2; i <= n; i++) {
        bin_log[i] = bin_log[i/2]+1;
    }
    // LOG = 0;
    // while ((1 << (LOG + 1)) <= n) LOG++;  // set log value using this.
    //alt---> LOG = 31 - __builtin_clz(n);
    for(int i = 0; i < n; i++) {
        cin >> a[i];
        m[i][0] = a[i];
    }
    // 2) preprocessing, O(N*log(N))
    for(int k = 1; k < LOG; k++) {
        for(int i = 0; i + (1 << k) - 1 < n; i++) {
            m[i][k] = min(m[i][k-1], m[i+(1<<(k-1))][k-1]);
        }
    }
    // 3) answer queries
    for(int i = 0; i < q; i++) {
        int L, R;
        cin >> L >> R;
        L--; R--;
        cout << query(L, R) << "\n";
    }
}

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>DS_SPARSE_TABLE</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>
