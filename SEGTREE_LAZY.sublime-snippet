<snippet>
  <content><![CDATA[
#include<bits/stdc++.h>
using namespace std;

const int N = 5e5 + 9;
int a[N];
int n;
struct ST {
  #define lc (_n << 1)
  #define rc ((_n << 1) + 1)
  long long t[4 * N], lazy[4 * N];
  ST() {
  memset(t, 0, sizeof t);
  memset(lazy, 0, sizeof lazy);
  }
  inline void push(int _n, int b, int e) { // change this
  if (lazy[_n] == 0) return;
  t[_n] = t[_n] + lazy[_n] * (e - b + 1);
  if (b != e) {
    lazy[lc] = lazy[lc] + lazy[_n];
    lazy[rc] = lazy[rc] + lazy[_n];
  }
  lazy[_n] = 0;
  }
  inline long long combine(long long a,long long b) { // change this
  return a + b;
  }
  inline void pull(int _n) { // change this
  t[_n] = t[lc] + t[rc];
  }
  void build(int _n, int b, int e) {
  lazy[_n] = 0; // change this
  if (b == e) {
    t[_n] = a[b];
    return;
  }
  int mid = (b + e) >> 1;
  build(lc, b, mid);
  build(rc, mid + 1, e);
  pull(_n);
  }
  void upd(int _n, int b, int e, int i, int j, long long v) {
  push(_n, b, e);
  if (j < b || e < i) return;
  if (i <= b && e <= j) {
    lazy[_n] = v; //set lazy
    push(_n, b, e);
    return;
  }
  int mid = (b + e) >> 1;
  upd(lc, b, mid, i, j, v);
  upd(rc, mid + 1, e, i, j, v);
  pull(_n);
  }
  void upd(int l, int r, int v) {
    upd(1, 1, n, l, r, v);
  }
  long long query(int _n, int b, int e, int i, int j) {
  push(_n, b, e);
  if (i > e || b > j) return 0; //return null
  if (i <= b && e <= j) return t[_n];
  int mid = (b + e) >> 1;
  return combine(query(lc, b, mid, i, j), query(rc, mid + 1, e, i, j));
  }
  long long query(int l, int r) {
    return query(1, 1, n, l, r);
  }
}t;
int32_t main() {
  ios_base::sync_with_stdio(0);cin.tie(0);
  // cin >> n;
  n = 5;
  for (int i = 1; i <= n; i++) {
  a[i] = i;
  }
  t.build(1, 1, n); // building the segment tree
  t.upd(2, 3, 10); // adding 10 to the segment [2, 3]
  cout << t.query(1, 5) << '\n'; // range sum query on the segment [1, 5]
  return 0;
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>SEGTREE_LAZY</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>

