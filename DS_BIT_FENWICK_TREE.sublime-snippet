<snippet>
  <content><![CDATA[
template <class T>
struct BIT { //1-indexed
  int n; vector<T> t;
  BIT() {}
  BIT(int _n) {
    n = _n; t.assign(n + 1, 0);
  }
  T query(int i) {
    T ans = 0;
    for (; i >= 1; i -= (i & -i)) ans += t[i];
    return ans;
  }
  void upd(int i, T val) {
    if (i <= 0) return;
    for (; i <= n; i += (i & -i)) t[i] += val;
  }
  void upd(int l, int r, T val) {
    upd(l, val);
    upd(r + 1, -val);
  }
  T query(int l, int r) {
    return query(r) - query(l - 1);
  }
  int querySingle(int idx) {
    int sum = t[idx]; // this sum will be decreased
    if (idx > 0) { // the special case
      int z = idx - (idx & -idx);
      idx--; // idx is not important anymore, so instead y, you can use idx
      while (idx != z) { // at some iteration idx (y) will become z
        sum -= t[idx];
        // substruct t frequency which is between y and "the same path"
        idx -= (idx & -idx);
      }
    }
    return sum;
  }
};
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>DS_BIT_FENWICK_TREE</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>

